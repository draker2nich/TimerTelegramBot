import logging
import json
import os
from dotenv import load_dotenv
import threading
from datetime import datetime, timedelta
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters, ConversationHandler

# Load environment variables
load_dotenv()

# Enhanced logging configuration
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[logging.FileHandler("bot.log"),
              logging.StreamHandler()])
logger = logging.getLogger(__name__)

# States for conversation
SUBJECT, WORK_TIME, BREAK_TIME, START_TIME, END_TIME, RUNNING = range(6)

# Constants
MIN_WORK_TIME = 5
MAX_WORK_TIME = 120
MIN_BREAK_TIME = 1
MAX_BREAK_TIME = 60

# Store active timers
active_timers = {}

# User data file path
USER_DATA_FILE = "user_data.json"

# Predefined emoji sets
SUBJECT_EMOJIS = {
    "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫": "üìö",
    "–ò—Å—Ç–æ—Ä–∏—è –ë–µ–ª–∞—Ä—É—Å–∏": "üèõÔ∏è",
    "–ë–∏–æ–ª–æ–≥–∏—è": "üß¨",
    "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞": "üî¢",
    "–•–∏–º–∏—è": "‚öóÔ∏è",
    "–§–∏–∑–∏–∫–∞": "‚öõÔ∏è",
    "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫": "üåê",
    "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞": "üìñ",
    "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞": "üíª",
    "–ì–µ–æ–≥—Ä–∞—Ñ–∏—è": "üåç",
    "–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ": "üë•"
}

# Default emoji for custom subjects
DEFAULT_CUSTOM_EMOJI = "üìù"

# Help messages
HELP_MESSAGES = {
    "main": (
        "üîç *–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞*\n\n"
        "*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "‚Ä¢ /start - –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é\n"
        "‚Ä¢ /stop - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ç–∞–π–º–µ—Ä\n"
        "‚Ä¢ /stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
        "‚Ä¢ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
        "*–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*\n"
        "1. –ù–∞–∂–º–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é\n"
        "2. –í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∏–ª–∏ –¥–æ–±–∞–≤—å –Ω–æ–≤—ã–π\n"
        "3. –£–∫–∞–∂–∏ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã (25-45 –º–∏–Ω—É—Ç —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)\n"
        "4. –£–∫–∞–∂–∏ –≤—Ä–µ–º—è –æ—Ç–¥—ã—Ö–∞ (5-15 –º–∏–Ω—É—Ç —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)\n"
        "5. –í—ã–±–µ—Ä–∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è\n"
        "6. –ë–æ—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–¥–æ–≤–∞—Ç—å –ø–µ—Ä–∏–æ–¥—ã —Ä–∞–±–æ—Ç—ã –∏ –æ—Ç–¥—ã—Ö–∞\n\n"
        "*–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–æ–º:*\n"
        "‚Ä¢ ‚è∏Ô∏è –ü–∞—É–∑–∞ - –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä\n"
        "‚Ä¢ ‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å - –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä –ø–æ—Å–ª–µ –ø–∞—É–∑—ã\n"
        "‚Ä¢ ‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ—Ç–¥—ã—Ö - –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ä–∞–±–æ—á–µ–º—É –∏–Ω—Ç–µ—Ä–≤–∞–ª—É\n"
        "‚Ä¢ ‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å - –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n\n"
        "*–°–æ–≤–µ—Ç—ã:*\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ—Ç–æ–¥ –ü–æ–º–æ–¥–æ—Ä–æ: 25 –º–∏–Ω—É—Ç —Ä–∞–±–æ—Ç—ã, 5 –º–∏–Ω—É—Ç –æ—Ç–¥—ã—Ö–∞\n"
        "‚Ä¢ –î–µ–ª–∞–π—Ç–µ –±–æ–ª–µ–µ –¥–ª–∏–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤ (15-30 –º–∏–Ω—É—Ç) –ø–æ—Å–ª–µ 4-—Ö —Ü–∏–∫–ª–æ–≤\n"
        "‚Ä¢ –£–±–∏—Ä–∞–π—Ç–µ –æ—Ç–≤–ª–µ–∫–∞—é—â–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã\n\n"
        "–ü—Ä–∏—è—Ç–Ω–æ–π –∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–π —É—á–µ–±—ã! üìö"
    ),
    "subject": (
        "*–í—ã–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞*\n\n"
        "–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –¥–æ–±–∞–≤—å –Ω–æ–≤—ã–π.\n"
        "–¢—ã –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–∏ –ø—Ä–µ–¥–º–µ—Ç—ã, –Ω–∞–∂–∞–≤ '‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç'.\n\n"
        "*–°–æ–≤–µ—Ç:* –°–æ–∑–¥–∞–≤–∞–π –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–µ–º –∏–ª–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤."
    ),
    "work_time": (
        "*–í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã*\n\n"
        "–í—ã–±–µ—Ä–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–∏–æ–¥–∞ —Ä–∞–±–æ—Ç—ã –≤ –º–∏–Ω—É—Ç–∞—Ö.\n"
        "–û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã ‚Äî 25-45 –º–∏–Ω—É—Ç.\n\n"
        "*–°–æ–≤–µ—Ç:* –ù–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã —Ä–∞–±–æ—Ç—ã, "
        "—ç—Ç–æ –º–æ–∂–µ—Ç —Å–Ω–∏–∑–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å."
    ),
    "break_time": (
        "*–í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–¥—ã—Ö–∞*\n\n"
        "–í—ã–±–µ—Ä–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–∏–æ–¥–∞ –æ—Ç–¥—ã—Ö–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö.\n"
        "–û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–¥—ã—Ö–∞ ‚Äî 5-15 –º–∏–Ω—É—Ç.\n\n"
        "*–°–æ–≤–µ—Ç:* –ò—Å–ø–æ–ª—å–∑—É–π –ø–µ—Ä–µ—Ä—ã–≤, —á—Ç–æ–±—ã –≤—Å—Ç–∞—Ç—å, —Ä–∞–∑–º—è—Ç—å—Å—è –∏–ª–∏ –≤—ã–ø–∏—Ç—å –≤–æ–¥—ã."
    ),
    "start_time": (
        "*–í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞*\n\n"
        "–í—ã–±–µ—Ä–∏, –∫–æ–≥–¥–∞ –Ω–∞—á–∞—Ç—å –æ—Ç—Å—á–µ—Ç —Ç–∞–π–º–µ—Ä–∞.\n"
        "–ú–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å —Å–µ–π—á–∞—Å –∏–ª–∏ —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è.\n\n"
        "*–°–æ–≤–µ—Ç:* –ï—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—à—å –Ω–µ —Å—Ä–∞–∑—É, –∏—Å–ø–æ–ª—å–∑—É–π —ç—Ç–æ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏."
    ),
    "end_time": (
        "*–í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è*\n\n"
        "–í—ã–±–µ—Ä–∏, –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç—å —Å–µ—Å—Å–∏—é, –∏–ª–∏ –≤—ã–±–µ—Ä–∏ '–ë–µ–∑ –æ–∫–æ–Ω—á–∞–Ω–∏—è'.\n\n"
        "*–°–æ–≤–µ—Ç:* –û–ø—Ä–µ–¥–µ–ª–∏ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ç–≤–æ–∏—Ö —Ü–µ–ª–µ–π."
    )
}


def load_user_data():
    """Load user statistics from file."""
    if os.path.exists(USER_DATA_FILE):
        try:
            with open(USER_DATA_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            logger.error(f"Error loading user data: {e}")
    return {}


def save_user_data(user_data):
    """Save user statistics to file."""
    try:
        with open(USER_DATA_FILE, 'w', encoding='utf-8') as f:
            json.dump(user_data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.error(f"Error saving user data: {e}")


class UserSession:
    """Class to store and manage user session data."""

    def __init__(self):
        self.subject = None
        self.work_time = None
        self.break_time = None
        self.start_time = None
        self.end_time = None
        self.is_working = False
        self.is_paused = False
        self.task = None
        self.start_timestamp = None  # To track when the session started
        self.total_work_time = 0  # Track actual work time in seconds
        self.total_work_sessions = 0  # Track number of completed work sessions
        self.pause_start_time = None  # Track when a pause started
        self.current_progress = 0  # Track current progress in percentage


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Start the conversation and ask for subject."""
    user_id = update.effective_user.id

    # Check if user already has an active timer
    if user_id in active_timers:
        keyboard = [
            [InlineKeyboardButton("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ç–∞–π–º–µ—Ä", callback_data="force_stop")],
            [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ç–µ–∫—É—â–µ–º—É —Ç–∞–π–º–µ—Ä—É", callback_data="return_to_timer")],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            "‚ö†Ô∏è *–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∞–π–º–µ—Ä!*\n\n"
            "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
            reply_markup=reply_markup,
            parse_mode='Markdown')
        return RUNNING

    # Initialize user session
    context.user_data['session'] = UserSession()

    # Get predefined and custom subjects from user data
    user_data = load_user_data()
    user_str_id = str(user_id)

    if user_str_id not in user_data:
        user_data[user_str_id] = {"stats": {}, "custom_subjects": []}
        save_user_data(user_data)

    # Combine predefined and custom subjects
    predefined_subjects = [
        "üìö –†—É—Å—Å–∫–∏–π —è–∑—ã–∫", "üèõÔ∏è –ò—Å—Ç–æ—Ä–∏—è –ë–µ–ª–∞—Ä—É—Å–∏", "üß¨ –ë–∏–æ–ª–æ–≥–∏—è",
        "üî¢ –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "‚öóÔ∏è –•–∏–º–∏—è", "‚öõÔ∏è –§–∏–∑–∏–∫–∞"
    ]

    custom_subjects = user_data[user_str_id].get("custom_subjects", [])

    # Create keyboard for subjects
    keyboard = []

    # Add predefined subjects
    for subject in predefined_subjects:
        keyboard.append([subject])

    # Add custom subjects
    for subject in custom_subjects:
        # Check if subject already has an emoji
        if " " in subject and any(emoji in subject for emoji in SUBJECT_EMOJIS.values()):
            keyboard.append([subject])
        else:
            # Add default emoji if none exists
            keyboard.append([f"{DEFAULT_CUSTOM_EMOJI} {subject}"])

    # Add options to add new subject or cancel
    keyboard.append(["‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç"])
    keyboard.append(["‚ùì –ü–æ–º–æ—â—å", "‚ùå –û—Ç–º–µ–Ω–∞"])

    reply_markup = ReplyKeyboardMarkup(keyboard,
                                    one_time_keyboard=True,
                                    resize_keyboard=True)

    await update.message.reply_text(
        "üëã *–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤—Ä–µ–º—è –¥–ª—è —É—á–µ–±—ã.*\n\n"
        "–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç, –∫–æ—Ç–æ—Ä—ã–º –±—É–¥–µ—à—å –∑–∞–Ω–∏–º–∞—Ç—å—Å—è:\n\n" +
        HELP_MESSAGES["subject"],
        reply_markup=reply_markup,
        parse_mode='Markdown')

    return SUBJECT


async def add_custom_subject(update: Update,
                          context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle adding a custom subject."""
    # Create cancel button
    keyboard = [["‚ùå –û—Ç–º–µ–Ω–∞"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)

    await update.message.reply_text(
        "üñä *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞*\n\n"
        "–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã: '–ò—Å—Ç–æ—Ä–∏—è –∏—Å–∫—É—Å—Å—Ç–≤', '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —ç–∫–∑–∞–º–µ–Ω—É'\n\n"
        "–ù–∞–∂–º–∏ '–û—Ç–º–µ–Ω–∞', —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –ø—Ä–µ–¥–º–µ—Ç–∞.",
        parse_mode='Markdown',
        reply_markup=reply_markup)

    context.user_data['adding_subject'] = True
    return SUBJECT


async def subject(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Store the selected subject and ask for work time."""
    # Check for help command
    if update.message.text == "‚ùì –ü–æ–º–æ—â—å":
        await update.message.reply_text(
            HELP_MESSAGES["main"],
            parse_mode='Markdown'
        )
        return await start(update, context)

    # Check for cancel command
    if update.message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        return await cancel(update, context)

    # Check if user is adding a new subject
    if context.user_data.get('adding_subject'):
        user_id = str(update.effective_user.id)
        new_subject = update.message.text

        # Skip if cancel is pressed
        if new_subject == "‚ùå –û—Ç–º–µ–Ω–∞":
            context.user_data['adding_subject'] = False
            return await start(update, context)

        # Load user data
        user_data = load_user_data()

        # Add the new subject
        if user_id not in user_data:
            user_data[user_id] = {"stats": {}, "custom_subjects": []}

        if "custom_subjects" not in user_data[user_id]:
            user_data[user_id]["custom_subjects"] = []

        # Add emoji if not present
        if not any(emoji in new_subject for emoji in list(SUBJECT_EMOJIS.values()) + [DEFAULT_CUSTOM_EMOJI]):
            new_subject = f"{DEFAULT_CUSTOM_EMOJI} {new_subject}"

        user_data[user_id]["custom_subjects"].append(new_subject)

        # Save user data
        save_user_data(user_data)

        # Clear the flag
        context.user_data['adding_subject'] = False

        # Confirmation message
        await update.message.reply_text(
            f"‚úÖ –ü—Ä–µ–¥–º–µ—Ç *{new_subject}* —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
            parse_mode='Markdown'
        )

        # Restart the subject selection
        return await start(update, context)

    session = context.user_data['session']
    # Remove emoji if present
    subject_text = update.message.text
    if "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç" in subject_text:
        return await add_custom_subject(update, context)

    # Extract the subject name without emoji
    if " " in subject_text and any(emoji in subject_text for emoji in list(SUBJECT_EMOJIS.values()) + [DEFAULT_CUSTOM_EMOJI]):
        parts = subject_text.split(" ", 1)
        emoji = parts[0]
        subject_name = parts[1]
        session.subject = subject_name
        session.subject_with_emoji = subject_text  # Store full name with emoji
    else:
        session.subject = subject_text
        session.subject_with_emoji = f"{DEFAULT_CUSTOM_EMOJI} {subject_text}"

    # Create styled inline keyboard for work time
    keyboard = []
    row = []
    times = [20, 25, 30, 35, 40, 45, 50, 55, 60]

    for i, time in enumerate(times):
        row.append(
            InlineKeyboardButton(f"‚è±Ô∏è {time} –º–∏–Ω",
                              callback_data=f"work_{time}"))
        if (i + 1) % 3 == 0:
            keyboard.append(row)
            row = []

    if row:
        keyboard.append(row)

    keyboard.append(
        [InlineKeyboardButton("‚úèÔ∏è –°–≤–æ–µ –≤—Ä–µ–º—è", callback_data="work_custom")])
    keyboard.append([InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help_work_time")])
    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])

    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        f"üìå *–í—ã–±—Ä–∞–Ω –ø—Ä–µ–¥–º–µ—Ç: {session.subject}*\n\n"
        f"{HELP_MESSAGES['work_time']}",
        reply_markup=reply_markup,
        parse_mode='Markdown')

    return WORK_TIME


async def show_help(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Show help message based on current state."""
    query = update.callback_query
    if query:
        await query.answer()
        
        # Determine which help message to show based on callback data
        help_type = query.data.replace("help_", "")
        
        if help_type in HELP_MESSAGES:
            await query.message.reply_text(
                HELP_MESSAGES[help_type],
                parse_mode='Markdown'
            )
        else:
            await query.message.reply_text(
                HELP_MESSAGES["main"],
                parse_mode='Markdown'
            )
        
        # Return to previous state
        return -1  # Will keep current state
    
    # If reached by text command, show main help
    await update.message.reply_text(
        HELP_MESSAGES["main"],
        parse_mode='Markdown'
    )
    return -1


async def custom_work_time(update: Update,
                         context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle custom work time input."""
    # Create cancel button
    keyboard = [["‚ùå –û—Ç–º–µ–Ω–∞"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    
    await update.callback_query.message.reply_text(
        "‚úèÔ∏è *–í–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã*\n\n"
        f"–í–≤–µ–¥–∏ –∂–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –≤ –º–∏–Ω—É—Ç–∞—Ö (–æ—Ç {MIN_WORK_TIME} –¥–æ {MAX_WORK_TIME}):\n\n"
        "–ü—Ä–∏–º–µ—Ä: 42",
        parse_mode='Markdown',
        reply_markup=reply_markup)
    
    context.user_data['expecting_custom_work'] = True
    return WORK_TIME


async def work_time(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Store the work time and ask for break time."""
    session = context.user_data['session']

    query = update.callback_query

    if query:
        await query.answer()

        if query.data == "cancel":
            await query.message.reply_text(
                "‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –ù–∞–∂–º–∏ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
            return ConversationHandler.END
            
        if query.data == "help_work_time":
            await query.message.reply_text(
                HELP_MESSAGES["work_time"],
                parse_mode='Markdown'
            )
            return WORK_TIME

        if query.data == "work_custom":
            return await custom_work_time(update, context)

        work_time = int(query.data.split("_")[1])
        session.work_time = work_time

        # Create stylish inline keyboard for break time
        keyboard = []
        row = []
        times = [5, 10, 15, 20, 25, 30]

        for i, time in enumerate(times):
            row.append(
                InlineKeyboardButton(f"‚òï {time} –º–∏–Ω",
                                 callback_data=f"break_{time}"))
            if (i + 1) % 3 == 0:
                keyboard.append(row)
                row = []

        if row:
            keyboard.append(row)

        keyboard.append([
            InlineKeyboardButton("‚úèÔ∏è –°–≤–æ–µ –≤—Ä–µ–º—è", callback_data="break_custom")
        ])
        keyboard.append([InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help_break_time")])
        keyboard.append(
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])

        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.message.reply_text(
            f"‚è±Ô∏è *–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {session.work_time} –º–∏–Ω—É—Ç*\n\n"
            f"{HELP_MESSAGES['break_time']}",
            reply_markup=reply_markup,
            parse_mode='Markdown')

        return BREAK_TIME
    else:
        # Handle text input for custom time
        try:
            # Check for cancel
            if update.message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
                return await cancel(update, context)
                
            work_time = int(update.message.text)
            if work_time < MIN_WORK_TIME or work_time > MAX_WORK_TIME:
                await update.message.reply_text(
                    f"‚ö†Ô∏è –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –æ—Ç {MIN_WORK_TIME} –¥–æ {MAX_WORK_TIME} –º–∏–Ω—É—Ç. "
                    f"–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:")
                return WORK_TIME

            session.work_time = work_time

            # Create inline keyboard for break time
            keyboard = []
            row = []
            times = [5, 10, 15, 20, 25, 30]

            for i, time in enumerate(times):
                row.append(
                    InlineKeyboardButton(f"‚òï {time} –º–∏–Ω",
                                     callback_data=f"break_{time}"))
                if (i + 1) % 3 == 0:
                    keyboard.append(row)
                    row = []

            if row:
                keyboard.append(row)

            keyboard.append([
                InlineKeyboardButton("‚úèÔ∏è –°–≤–æ–µ –≤—Ä–µ–º—è",
                                 callback_data="break_custom")
            ])
            keyboard.append([InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help_break_time")])
            keyboard.append(
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])

            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(
                f"‚è±Ô∏è *–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {session.work_time} –º–∏–Ω—É—Ç*\n\n"
                f"{HELP_MESSAGES['break_time']}",
                reply_markup=reply_markup,
                parse_mode='Markdown')

            return BREAK_TIME
        except ValueError:
            await update.message.reply_text(
                f"‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç (–æ—Ç {MIN_WORK_TIME} –¥–æ {MAX_WORK_TIME}):")
            return WORK_TIME


async def custom_break_time(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle custom break time input."""
    # Create cancel button
    keyboard = [["‚ùå –û—Ç–º–µ–Ω–∞"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    
    await update.callback_query.message.reply_text(
        "‚úèÔ∏è *–í–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–¥—ã—Ö–∞*\n\n"
        f"–í–≤–µ–¥–∏ –∂–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è –æ—Ç–¥—ã—Ö–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö (–æ—Ç {MIN_BREAK_TIME} –¥–æ {MAX_BREAK_TIME}):\n\n"
        "–ü—Ä–∏–º–µ—Ä: 15",
        parse_mode='Markdown',
        reply_markup=reply_markup)
    
    context.user_data['expecting_custom_break'] = True
    return BREAK_TIME


async def break_time(update: Update,
                   context: ContextTypes.DEFAULT_TYPE) -> int:
    """Store the break time and ask for start time."""
    session = context.user_data['session']

    query = update.callback_query

    if query:
        await query.answer()

        if query.data == "cancel":
            await query.message.reply_text(
                "‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –ù–∞–∂–º–∏ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
            return ConversationHandler.END
            
        if query.data == "help_break_time":
            await query.message.reply_text(
                HELP_MESSAGES["break_time"],
                parse_mode='Markdown'
            )
            return BREAK_TIME

        if query.data == "break_custom":
            return await custom_break_time(update, context)

        break_time = int(query.data.split("_")[1])
        session.break_time = break_time

        # Create a visual time picker interface
        current_time = datetime.now()
        hour = current_time.hour
        minute = current_time.minute

        # Round up to the nearest 5 minutes
        minute = ((minute + 4) // 5) * 5
        if minute >= 60:
            minute = 0
            hour = (hour + 1) % 24

        formatted_time = f"{hour:02d}:{minute:02d}"

        # Create a keyboard with quick time options
        keyboard = []

        # Current time
        keyboard.append([
            InlineKeyboardButton(f"‚è±Ô∏è –°–µ–π—á–∞—Å ({formatted_time})",
                             callback_data=f"time_{formatted_time}")
        ])

        # Common times
        suggestions = []
        for h in range(hour, hour + 3):
            h = h % 24
            for m in [0, 15, 30, 45]:
                # Create a datetime to compare
                suggest_time = datetime.now().replace(hour=h%24, minute=m, second=0, microsecond=0)
                # Only include future times
                if suggest_time > current_time:
                    suggestions.append(f"{h%24:02d}:{m:02d}")

        row = []
        for i, time_str in enumerate(suggestions[:6]):
            row.append(
                InlineKeyboardButton(time_str,
                                 callback_data=f"time_{time_str}"))
            if (i + 1) % 3 == 0:
                keyboard.append(row)
                row = []

        if row:
            keyboard.append(row)

        keyboard.append([
            InlineKeyboardButton("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é",
                             callback_data="time_custom")
        ])
        keyboard.append([InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help_start_time")])
        keyboard.append(
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])

        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.message.reply_text(
            f"‚òï *–í—Ä–µ–º—è –æ—Ç–¥—ã—Ö–∞: {session.break_time} –º–∏–Ω—É—Ç*\n\n"
            f"{HELP_MESSAGES['start_time']}",
            reply_markup=reply_markup,
            parse_mode='Markdown')

        # Store that we're now expecting custom time input
        context.user_data['expecting_custom_time'] = False

        return START_TIME
    else:
        # Handle text input for custom time
        try:
            # Check for cancel
            if update.message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
                return await cancel(update, context)
                
            break_time = int(update.message.text)
            if break_time < MIN_BREAK_TIME or break_time > MAX_BREAK_TIME:
                await update.message.reply_text(
                    f"‚ö†Ô∏è –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –æ—Ç {MIN_BREAK_TIME} –¥–æ {MAX_BREAK_TIME} –º–∏–Ω—É—Ç. "
                    f"–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:")
                return BREAK_TIME

            session.break_time = break_time

            # Create a visual time picker interface
            current_time = datetime.now()
            hour = current_time.hour
            minute = current_time.minute

            # Round up to the nearest 5 minutes
            minute = ((minute + 4) // 5) * 5
            if minute >= 60:
                minute = 0
                hour = (hour + 1) % 24

            formatted_time = f"{hour:02d}:{minute:02d}"

            # Create a keyboard with quick time options
            keyboard = []

            # Current time
            keyboard.append([
                InlineKeyboardButton(f"‚è±Ô∏è –°–µ–π—á–∞—Å ({formatted_time})",
                                 callback_data=f"time_{formatted_time}")
            ])

            # Options to add +15, +30, +45 minutes to current time
            row = []
            for mins, label in [(15, "+15 –º–∏–Ω"), (30, "+30 –º–∏–Ω"), (45, "+45 –º–∏–Ω")]:
                future_time = current_time + timedelta(minutes=mins)
                time_str = future_time.strftime("%H:%M")
                row.append(
                    InlineKeyboardButton(f"{label} ({time_str})",
                                     callback_data=f"time_{time_str}"))

            keyboard.append(row)

            keyboard.append([
                InlineKeyboardButton("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é",
                                 callback_data="time_custom")
            ])
            keyboard.append([InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help_start_time")])
            keyboard.append(
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])

            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(
                f"‚òï *–í—Ä–µ–º—è –æ—Ç–¥—ã—Ö–∞: {session.break_time} –º–∏–Ω—É—Ç*\n\n"
                f"{HELP_MESSAGES['start_time']}",
                reply_markup=reply_markup,
                parse_mode='Markdown')

            return START_TIME
        except ValueError:
            await update.message.reply_text(
                f"‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç (–æ—Ç {MIN_BREAK_TIME} –¥–æ {MAX_BREAK_TIME}):")
            return BREAK_TIME


async def custom_start_time(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle custom start time input."""
    # Create cancel button
    keyboard = [["‚ùå –û—Ç–º–µ–Ω–∞"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    
    await update.callback_query.message.reply_text(
        "‚úèÔ∏è *–í–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞*\n\n"
        "–í–≤–µ–¥–∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã: 14:30, 09:15",
        parse_mode='Markdown',
        reply_markup=reply_markup)
    
    context.user_data['expecting_custom_time'] = True
    return START_TIME


async def start_time(update: Update,
                   context: ContextTypes.DEFAULT_TYPE) -> int:
    """Store the start time and ask for end time."""
    session = context.user_data['session']

    # Handle callback query for time selection
    if update.callback_query:
        query = update.callback_query
        await query.answer()

        if query.data == "cancel":
            await query.message.reply_text(
                "‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –ù–∞–∂–º–∏ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
            return ConversationHandler.END
            
        if query.data == "help_start_time":
            await query.message.reply_text(
                HELP_MESSAGES["start_time"],
                parse_mode='Markdown'
            )
            return START_TIME

        if query.data == "time_custom":
            return await custom_start_time(update, context)

        if query.data.startswith("time_"):
            time_str = query.data.split("_")[1]
            try:
                # Parse the time string
                start_time = datetime.strptime(time_str, "%H:%M").time()
                current_date = datetime.now().date()

                # Combine date and time
                session.start_time = datetime.combine(current_date, start_time)

                # Now create end time options
                keyboard = []
                
                # No end time option
                keyboard.append([
                    InlineKeyboardButton("‚è±Ô∏è –ë–µ–∑ –æ–∫–æ–Ω—á–∞–Ω–∏—è", callback_data="end_none")
                ])
                
                # Suggested durations
                row = []
                durations = [1, 2, 3, 4]
                for i, hours in enumerate(durations):
                    end_time = session.start_time + timedelta(hours=hours)
                    time_str = end_time.strftime("%H:%M")
                    row.append(
                        InlineKeyboardButton(f"+{hours}—á ({time_str})",
                                         callback_data=f"end_{time_str}"))
                    if (i + 1) % 2 == 0:
                        keyboard.append(row)
                        row = []

                if row:
                    keyboard.append(row)

                keyboard.append([
                    InlineKeyboardButton("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data="end_custom")
                ])
                keyboard.append([InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help_end_time")])
                keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])

                reply_markup = InlineKeyboardMarkup(keyboard)

                await query.message.reply_text(
                    f"üïí *–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {start_time.strftime('%H:%M')}*\n\n"
                    f"{HELP_MESSAGES['end_time']}",
                    reply_markup=reply_markup,
                    parse_mode='Markdown')

                return END_TIME

            except ValueError:
                await query.message.reply_text(
                    "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑."
                )
                return START_TIME

    # Handle text input for custom time
    elif update.message:
        # Check for stop command
        if update.message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
            return await cancel(update, context)

        if context.user_data.get('expecting_custom_time', False):
            try:
                time_str = update.message.text
                # Parse the time string
                start_time = datetime.strptime(time_str, "%H:%M").time()
                current_date = datetime.now().date()

                # Combine date and time
                session.start_time = datetime.combine(current_date, start_time)

                # Now create end time options similar to above
                keyboard = []
                
                # No end time option
                keyboard.append([
                    InlineKeyboardButton("‚è±Ô∏è –ë–µ–∑ –æ–∫–æ–Ω—á–∞–Ω–∏—è", callback_data="end_none")
                ])
                
                # Suggested durations
                row = []
                durations = [1, 2, 3, 4]
                for i, hours in enumerate(durations):
                    end_time = session.start_time + timedelta(hours=hours)
                    time_str = end_time.strftime("%H:%M")
                    row.append(
                        InlineKeyboardButton(f"+{hours}—á ({time_str})",
                                         callback_data=f"end_{time_str}"))
                    if (i + 1) % 2 == 0:
                        keyboard.append(row)
                        row = []

                if row:
                    keyboard.append(row)

                keyboard.append([
                    InlineKeyboardButton("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data="end_custom")
                ])
                keyboard.append([InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help_end_time")])
                keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])

                reply_markup = InlineKeyboardMarkup(keyboard)

                await update.message.reply_text(
                    f"üïí *–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {start_time.strftime('%H:%M')}*\n\n"
                    f"{HELP_MESSAGES['end_time']}",
                    reply_markup=reply_markup,
                    parse_mode='Markdown')

                return END_TIME

            except ValueError:
                await update.message.reply_text(
                    "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30):"
                )
                return START_TIME

    return START_TIME


async def custom_end_time(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle custom end time input."""
    # Create cancel button
    keyboard = [["‚ùå –û—Ç–º–µ–Ω–∞"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    
    await update.callback_query.message.reply_text(
        "‚úèÔ∏è *–í–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è*\n\n"
        "–í–≤–µ–¥–∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã: 16:45, 22:00",
        parse_mode='Markdown',
        reply_markup=reply_markup)
    
    context.user_data['expecting_custom_end_time'] = True
    return END_TIME


async def end_time(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Store the end time and start the timer."""
    session = context.user_data['session']

    # Handle callback query
    if update.callback_query:
        query = update.callback_query
        await query.answer()

        if query.data == "cancel":
            await query.message.reply_text(
                "‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –ù–∞–∂–º–∏ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
            return ConversationHandler.END
            
        if query.data == "help_end_time":
            await query.message.reply_text(
                HELP_MESSAGES["end_time"],
                parse_mode='Markdown'
            )
            return END_TIME

        if query.data == "end_none":
            session.end_time = None
            return await start_timer(update, context)

        if query.data == "end_custom":
            return await custom_end_time(update, context)

        if query.data.startswith("end_"):
            time_str = query.data.split("_")[1]
            try:
                # Parse the time string
                end_time = datetime.strptime(time_str, "%H:%M").time()
                current_date = datetime.now().date()

                # Combine date and time
                session.end_time = datetime.combine(current_date, end_time)

                # Check if end time is before start time
                if session.end_time < session.start_time:
                    # Assume it's for the next day
                    session.end_time += timedelta(days=1)

                return await start_timer(update, context)

            except ValueError:
                await query.message.reply_text(
                    "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑."
                )
                return END_TIME

    # Handle text input for custom end time
    elif update.message:
        # Check for stop command
        if update.message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
            return await cancel(update, context)

        if context.user_data.get('expecting_custom_end_time', False):
            try:
                time_str = update.message.text
                # Parse the time string
                end_time = datetime.strptime(time_str, "%H:%M").time()
                current_date = datetime.now().date()

                # Combine date and time
                session.end_time = datetime.combine(current_date, end_time)

                # Check if end time is before start time
                if session.end_time < session.start_time:
                    # Assume it's for the next day
                    session.end_time += timedelta(days=1)

                return await start_timer(update, context)

            except ValueError:
                await update.message.reply_text(
                    "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 16:45):"
                )
                return END_TIME

    return END_TIME


async def start_timer(update: Update,
                    context: ContextTypes.DEFAULT_TYPE) -> int:
    """Start the work/break cycle."""
    session = context.user_data['session']
    user_id = update.effective_user.id

    # Initialize session start timestamp
    session.start_timestamp = datetime.now()

    # Create a visually appealing summary of settings
    summary = (f"üìö *–ü—Ä–µ–¥–º–µ—Ç*: {session.subject}\n"
             f"‚è± *–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã*: {session.work_time} –º–∏–Ω—É—Ç\n"
             f"‚òï *–í—Ä–µ–º—è –æ—Ç–¥—ã—Ö–∞*: {session.break_time} –º–∏–Ω—É—Ç\n"
             f"üïí *–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞*: {session.start_time.strftime('%H:%M')}\n")

    if session.end_time:
        summary += f"üèÅ *–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è*: {session.end_time.strftime('%H:%M')}\n"
    else:
        summary += "üèÅ *–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è*: –ù–µ —É–∫–∞–∑–∞–Ω–æ\n"

    # Create more interactive keyboard for timer control
    keyboard = [
        [InlineKeyboardButton("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data="stop_timer")],
        [
            InlineKeyboardButton("‚è∏Ô∏è –ü–∞—É–∑–∞", callback_data="pause_timer"),
            InlineKeyboardButton("‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="resume_timer")
        ],
        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # Also provide a persistent quick stop button
    stop_keyboard = [
        [KeyboardButton("‚ùå –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä")],
        [KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton("‚è∏Ô∏è –ü–∞—É–∑–∞/‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å")],
        [KeyboardButton("‚ùì –ü–æ–º–æ—â—å")]
    ]
    stop_markup = ReplyKeyboardMarkup(stop_keyboard, resize_keyboard=True)

    # Start the first work session
    session.is_working = True
    active_timers[user_id] = session

    # Create and start the timer task
    session.task = asyncio.create_task(run_timer(update, context, user_id))

    # Send confirmation message with fancy formatting
    if update.message:
        await update.message.reply_text(
            f"‚úÖ *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!*\n\n{summary}\n"
            f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–±–æ—Ç—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å! –£–¥–∞—á–∏ —Å –∏–∑—É—á–µ–Ω–∏–µ–º –ø—Ä–µ–¥–º–µ—Ç–∞ *{session.subject}*!\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–æ–º.",
            reply_markup=reply_markup,
            parse_mode='Markdown')
        await update.message.reply_text(
            "–ë—ã—Å—Ç—Ä—ã–µ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
            reply_markup=stop_markup)
    else:
        await update.callback_query.message.reply_text(
            f"‚úÖ *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!*\n\n{summary}\n"
            f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–±–æ—Ç—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å! –£–¥–∞—á–∏ —Å –∏–∑—É—á–µ–Ω–∏–µ–º –ø—Ä–µ–¥–º–µ—Ç–∞ *{session.subject}*!\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–æ–º.",
            reply_markup=reply_markup,
            parse_mode='Markdown')
        await update.callback_query.message.reply_text(
            "–ë—ã—Å—Ç—Ä—ã–µ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:", 
            reply_markup=stop_markup)

    return RUNNING


async def run_timer(update: Update, context: ContextTypes.DEFAULT_TYPE,
                  user_id: int):
    """Run the work/break cycle."""
    session = active_timers.get(user_id)
    if not session:
        return

    # Get the chat ID from the update
    chat_id = update.effective_chat.id

    # Add pause functionality
    session.is_paused = False

    try:
        while True:
            now = datetime.now()

            # Check if we've reached the end time
            if session.end_time and now >= session.end_time:
                # Update statistics
                await update_statistics(user_id, session)

                # Create return keyboard
                keyboard = [
                    [KeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é")],
                    [KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton("‚ùì –ü–æ–º–æ—â—å")]
                ]
                reply_markup = ReplyKeyboardMarkup(keyboard,
                                                resize_keyboard=True)

                await context.bot.send_message(
                    chat_id=chat_id,
                    text=f"‚è∞ *–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ!*\n\n"
                    f"–°–µ—Å—Å–∏—è –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É *{session.subject}* –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n\n"
                    f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏:*\n"
                    f"‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ —Ä–∞–±–æ—á–∏—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤: *{session.total_work_sessions}*\n"
                    f"‚Ä¢ –û–±—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: *{format_time_duration(session.total_work_time)}*\n\n"
                    f"–ú–æ–ª–æ–¥–µ—Ü! –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '–ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é' –∏–ª–∏ /start.",
                    parse_mode='Markdown',
                    reply_markup=reply_markup)
                if user_id in active_timers:
                    del active_timers[user_id]
                break

            # Check if timer is paused
            while session.is_paused:
                await asyncio.sleep(1)  # Check every second if pause state has changed

                # If timer was deleted while paused, exit
                if user_id not in active_timers:
                    return

            if session.is_working:
                # Working period
                # Create inline keyboard for quick control
                keyboard = [
                    [
                        InlineKeyboardButton("‚è∏Ô∏è –ü–∞—É–∑–∞", callback_data="pause_timer"),
                        InlineKeyboardButton("‚èπÔ∏è –°—Ç–æ–ø", callback_data="stop_timer")
                    ]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)

                # Calculate end time of this work session
                end_work = now + timedelta(minutes=session.work_time)

                # Calculate progress for this session
                progress_message = create_progress_bar(0, session.work_time)

                work_message = await context.bot.send_message(
                    chat_id=chat_id,
                    text=f"üöÄ *–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–±–æ—Ç—É!*\n\n"
                    f"üìö –ü—Ä–µ–¥–º–µ—Ç: *{session.subject}*\n"
                    f"‚è±Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: *{session.work_time}* –º–∏–Ω—É—Ç\n"
                    f"üïí –î–æ: *{end_work.strftime('%H:%M')}*\n\n"
                    f"{progress_message}",
                    parse_mode='Markdown',
                    reply_markup=reply_markup)

                # Track the start time of work session for statistics
                work_start_time = datetime.now()

                # Sleep in shorter intervals and update the progress bar
                remaining_seconds = session.work_time * 60
                update_interval = 30  # Update progress every 30 seconds

                while remaining_seconds > 0:
                    # Sleep for shorter interval or remaining time, whichever is smaller
                    sleep_time = min(update_interval, remaining_seconds)
                    await asyncio.sleep(sleep_time)

                    # If paused or stopped, break the loop
                    if session.is_paused or user_id not in active_timers:
                        break

                    remaining_seconds -= sleep_time
                    elapsed_minutes = (session.work_time * 60 - remaining_seconds) / 60

                    # Update progress bar
                    progress_message = create_progress_bar(elapsed_minutes, session.work_time)
                    
                    # Update progress percentage for session
                    session.current_progress = int((elapsed_minutes / session.work_time) * 100)

                    try:
                        await context.bot.edit_message_text(
                            chat_id=chat_id,
                            message_id=work_message.message_id,
                            text=f"üöÄ *–†–∞–±–æ—Ç–∞ –Ω–∞–¥ –ø—Ä–µ–¥–º–µ—Ç–æ–º*\n\n"
                            f"üìö –ü—Ä–µ–¥–º–µ—Ç: *{session.subject}*\n"
                            f"‚è±Ô∏è –û—Å—Ç–∞–ª–æ—Å—å: *{int(remaining_seconds / 60)}* –º–∏–Ω *{remaining_seconds % 60}* —Å–µ–∫\n"
                            f"üïí –î–æ: *{end_work.strftime('%H:%M')}*\n\n"
                            f"{progress_message}",
                            parse_mode='Markdown',
                            reply_markup=reply_markup)
                    except Exception as e:
                        logger.error(f"Error updating progress: {e}")

                # If the timer was paused or stopped, don't continue
                if session.is_paused or user_id not in active_timers:
                    continue

                # Update work statistics
                work_end_time = datetime.now()
                work_duration = (work_end_time - work_start_time).total_seconds()
                session.total_work_time += work_duration
                session.total_work_sessions += 1

                # Play a sound or send a notification that work session is complete
                await context.bot.send_message(
                    chat_id=chat_id,
                    text="üéµ *–î–∑–∏–Ω—å!* –†–∞–±–æ—á–∏–π –ø–µ—Ä–∏–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω! –í—Ä–µ–º—è –¥–ª—è –æ—Ç–¥—ã—Ö–∞.",
                    parse_mode='Markdown'
                )

                # Switch to break
                session.is_working = False

                # Create inline keyboard for break time
                keyboard = [
                    [
                        InlineKeyboardButton("‚è∏Ô∏è –ü–∞—É–∑–∞", callback_data="pause_timer"),
                        InlineKeyboardButton("‚èπÔ∏è –°—Ç–æ–ø", callback_data="stop_timer")
                    ],
                    [InlineKeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ—Ç–¥—ã—Ö", callback_data="skip_break")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)

                # Calculate end time of this break session
                end_break = now + timedelta(minutes=session.break_time)

                # Create progress bar for break
                break_progress = create_progress_bar(0, session.break_time)

                break_message = await context.bot.send_message(
                    chat_id=chat_id,
                    text=f"‚òï *–í—Ä–µ–º—è –æ—Ç–¥—ã—Ö–∞!*\n\n"
                    f"üí§ –û—Ç–¥—ã—Ö–∞–π *{session.break_time}* –º–∏–Ω—É—Ç\n"
                    f"üïí –î–æ: *{end_break.strftime('%H:%M')}*\n\n"
                    f"{break_progress}",
                    parse_mode='Markdown',
                    reply_markup=reply_markup)
                    
                # Sleep in shorter intervals and update the progress bar for break
                remaining_seconds = session.break_time * 60
                update_interval = 15  # Update progress more frequently during break

                while remaining_seconds > 0:
                    # Sleep for shorter interval or remaining time, whichever is smaller
                    sleep_time = min(update_interval, remaining_seconds)
                    await asyncio.sleep(sleep_time)

                    # If paused or stopped, break the loop
                    if session.is_paused or user_id not in active_timers:
                        break

                    remaining_seconds -= sleep_time
                    elapsed_minutes = (session.break_time * 60 - remaining_seconds) / 60

                    # Update progress bar
                    break_progress = create_progress_bar(elapsed_minutes, session.break_time)

                    try:
                        await context.bot.edit_message_text(
                            chat_id=chat_id,
                            message_id=break_message.message_id,
                            text=f"‚òï *–í—Ä–µ–º—è –æ—Ç–¥—ã—Ö–∞!*\n\n"
                            f"üí§ –û—Å—Ç–∞–ª–æ—Å—å: *{int(remaining_seconds / 60)}* –º–∏–Ω *{remaining_seconds % 60}* —Å–µ–∫\n"
                            f"üïí –î–æ: *{end_break.strftime('%H:%M')}*\n\n"
                            f"{break_progress}",
                            parse_mode='Markdown',
                            reply_markup=reply_markup)
                    except Exception as e:
                        logger.error(f"Error updating break progress: {e}")

                # If the timer was paused or stopped, don't continue
                if session.is_paused or user_id not in active_timers:
                    continue

                # Play a sound or send a notification that break is complete
                await context.bot.send_message(
                    chat_id=chat_id,
                    text="üîî *–î–∑–∏–Ω—å!* –ü–µ—Ä–µ—Ä—ã–≤ –æ–∫–æ–Ω—á–µ–Ω! –ü–æ—Ä–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –∫ —Ä–∞–±–æ—Ç–µ.",
                    parse_mode='Markdown'
                )

                # Switch to work
                session.is_working = True

                # Create inline keyboard for work period
                keyboard = [
                    [
                        InlineKeyboardButton("‚è∏Ô∏è –ü–∞—É–∑–∞", callback_data="pause_timer"),
                        InlineKeyboardButton("‚èπÔ∏è –°—Ç–æ–ø", callback_data="stop_timer")
                    ]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)

                await context.bot.send_message(
                    chat_id=chat_id,
                    text=f"üîÑ *–ü–µ—Ä–µ—Ä—ã–≤ –æ–∫–æ–Ω—á–µ–Ω!*\n\n"
                    f"–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ä–∞–±–æ—Ç–µ –Ω–∞–¥ –ø—Ä–µ–¥–º–µ—Ç–æ–º *{session.subject}*.\n\n"
                    f"–ù–µ–±–æ–ª—å—à–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                    f"‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤: {session.total_work_sessions}\n"
                    f"‚Ä¢ –û–±—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {format_time_duration(session.total_work_time)}",
                    parse_mode='Markdown',
                    reply_markup=reply_markup)
            else:
                # Break period (already handled above in the new implementation)
                # The break period is now handled with progress updates
                await asyncio.sleep(1)
                
    except asyncio.CancelledError:
        # Task was cancelled, clean up
        if user_id in active_timers:
            # Update statistics before deleting
            await update_statistics(user_id, session)
            del active_timers[user_id]
    except Exception as e:
        logger.error(f"Error in timer task: {e}")
        await context.bot.send_message(
            chat_id=chat_id,
            text=f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞–π–º–µ—Ä —Å –ø–æ–º–æ—â—å—é /start")
        if user_id in active_timers:
            del active_timers[user_id]


def create_progress_bar(elapsed_minutes, total_minutes, width=20):
    """Create a visual progress bar."""
    progress = min(1.0, elapsed_minutes / total_minutes)
    filled_width = int(width * progress)
    empty_width = width - filled_width

    bar = "‚ñì" * filled_width + "‚ñë" * empty_width
    percentage = int(progress * 100)

    return f"[{bar}] {percentage}%"


async def update_statistics(user_id, session):
    """Update user statistics at the end of a session."""
    try:
        user_str_id = str(user_id)
        user_data = load_user_data()

        if user_str_id not in user_data:
            user_data[user_str_id] = {"stats": {}, "custom_subjects": []}

        if "stats" not in user_data[user_str_id]:
            user_data[user_str_id]["stats"] = {}

        subject = session.subject
        if subject not in user_data[user_str_id]["stats"]:
            user_data[user_str_id]["stats"][subject] = {
                "total_sessions": 0,
                "total_work_time": 0,
                "total_work_intervals": 0,
                "last_session": None
            }

        # Update statistics
        stats = user_data[user_str_id]["stats"][subject]
        stats["total_sessions"] += 1
        stats["total_work_time"] += session.total_work_time
        stats["total_work_intervals"] += session.total_work_sessions
        stats["last_session"] = datetime.now().strftime("%Y-%m-%d %H:%M")

        save_user_data(user_data)
    except Exception as e:
        logger.error(f"Error updating statistics: {e}")


def format_time_duration(seconds):
    """Format seconds into a readable time duration."""
    hours = int(seconds // 3600)
    minutes = int((seconds % 3600) // 60)
    seconds = int(seconds % 60)

    if hours > 0:
        return f"{hours} —á {minutes} –º–∏–Ω {seconds} —Å–µ–∫"
    elif minutes > 0:
        return f"{minutes} –º–∏–Ω {seconds} —Å–µ–∫"
    else:
        return f"{seconds} —Å–µ–∫"


async def get_stats(update: Update,
                  context: ContextTypes.DEFAULT_TYPE) -> None:
    """Display user statistics."""
    user_id = str(update.effective_user.id)
    user_data = load_user_data()

    if user_id not in user_data or "stats" not in user_data[user_id] or not user_data[user_id]["stats"]:
        await update.message.reply_text(
            "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ù–∞—á–Ω–∏—Ç–µ —Å–µ—Å—Å–∏—é, —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ.",
            parse_mode='Markdown')
        return

    stats = user_data[user_id]["stats"]

    # Create a formatted statistics message
    stats_text = "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º*\n\n"

    # Sort subjects by total work time (descending)
    sorted_subjects = sorted(
        stats.items(), 
        key=lambda x: x[1]["total_work_time"], 
        reverse=True
    )

    for subject, subject_stats in sorted_subjects:
        total_time = format_time_duration(subject_stats["total_work_time"])
        avg_session_time = format_time_duration(
            subject_stats["total_work_time"] / subject_stats["total_sessions"] 
            if subject_stats["total_sessions"] > 0 else 0
        )
        
        stats_text += f"*{subject}*\n"
        stats_text += f"‚Ä¢ –í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π: {subject_stats['total_sessions']}\n"
        stats_text += f"‚Ä¢ –†–∞–±–æ—á–∏—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤: {subject_stats['total_work_intervals']}\n"
        stats_text += f"‚Ä¢ –û–±—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {total_time}\n"
        stats_text += f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Å–µ—Å—Å–∏–∏: {avg_session_time}\n"

        last_session = subject_stats.get("last_session")
        if last_session:
            stats_text += f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–µ—Å—Å–∏—è: {last_session}\n"

        stats_text += "\n"

    # Calculate overall statistics
    total_work_time = sum(subject_stats["total_work_time"] for subject_stats in stats.values())
    total_sessions = sum(subject_stats["total_sessions"] for subject_stats in stats.values())
    total_intervals = sum(subject_stats["total_work_intervals"] for subject_stats in stats.values())
    
    stats_text += f"*–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n"
    stats_text += f"‚Ä¢ –í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π: {total_sessions}\n"
    stats_text += f"‚Ä¢ –í—Å–µ–≥–æ —Ä–∞–±–æ—á–∏—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤: {total_intervals}\n"
    stats_text += f"‚Ä¢ –û–±—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {format_time_duration(total_work_time)}\n\n"
    
    stats_text += "üèÜ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üí™"

    # Create keyboard for statistics interactions
    keyboard = [
        [InlineKeyboardButton("üìù –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="clear_stats")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_from_stats")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        stats_text,
        parse_mode='Markdown',
        reply_markup=reply_markup)


async def clear_stats(update: Update,
                    context: ContextTypes.DEFAULT_TYPE) -> None:
    """Clear user statistics."""
    query = update.callback_query
    await query.answer()

    user_id = str(update.effective_user.id)
    user_data = load_user_data()

    if user_id in user_data and "stats" in user_data[user_id]:
        # Confirm clearing stats
        keyboard = [
            [InlineKeyboardButton("‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å", callback_data="confirm_clear_stats")],
            [InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="cancel_clear_stats")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.message.reply_text(
            "‚ö†Ô∏è *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è*\n\n"
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
            parse_mode='Markdown',
            reply_markup=reply_markup)


async def confirm_clear_stats(update: Update,
                           context: ContextTypes.DEFAULT_TYPE) -> None:
    """Confirm clearing user statistics."""
    query = update.callback_query
    await query.answer()

    user_id = str(update.effective_user.id)
    user_data = load_user_data()

    if user_id in user_data and "stats" in user_data[user_id]:
        user_data[user_id]["stats"] = {}
        save_user_data(user_data)

        await query.message.reply_text(
            "‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞.\n\n"
            "–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é.")


async def cancel_clear_stats(update: Update,
                          context: ContextTypes.DEFAULT_TYPE) -> None:
    """Cancel clearing user statistics."""
    query = update.callback_query
    await query.answer()

    await query.message.reply_text(
        "‚ùå –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n"
        "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")


async def back_from_stats(update: Update,
                        context: ContextTypes.DEFAULT_TYPE) -> None:
    """Return from statistics view."""
    query = update.callback_query
    await query.answer()

    # Create default keyboard
    keyboard = [
        [KeyboardButton("üöÄ –°—Ç–∞—Ä—Ç"), KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
        [KeyboardButton("‚ùì –ü–æ–º–æ—â—å")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await query.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", 
        reply_markup=reply_markup)


async def toggle_pause(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Toggle pause/resume state for the timer."""
    user_id = update.effective_user.id
    
    if user_id in active_timers:
        session = active_timers[user_id]
        
        if session.is_paused:
            # Resume the timer
            session.is_paused = False
            keyboard = [
                [InlineKeyboardButton("‚è∏Ô∏è –ü–∞—É–∑–∞", callback_data="pause_timer")],
                [InlineKeyboardButton("‚èπÔ∏è –°—Ç–æ–ø", callback_data="stop_timer")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "‚ñ∂Ô∏è *–¢–∞–π–º–µ—Ä –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω*\n\n–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ—Ç—Å—á–µ—Ç!",
                parse_mode='Markdown',
                reply_markup=reply_markup)
        else:
            # Pause the timer
            session.is_paused = True
            session.pause_start_time = datetime.now()
            
            keyboard = [
                [InlineKeyboardButton("‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="resume_timer")],
                [InlineKeyboardButton("‚èπÔ∏è –°—Ç–æ–ø", callback_data="stop_timer")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "‚è∏Ô∏è *–¢–∞–π–º–µ—Ä –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω*\n\n–ù–∞–∂–º–∏ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', —á—Ç–æ–±—ã –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –æ—Ç—Å—á–µ—Ç.",
                parse_mode='Markdown',
                reply_markup=reply_markup)
    else:
        # No active timer
        keyboard = [[KeyboardButton("üöÄ –°—Ç–∞—Ä—Ç"), KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é, –Ω–∞–∂–º–∏ /start.",
            reply_markup=reply_markup)
    
    return RUNNING


async def stop_timer(update: Update,
                   context: ContextTypes.DEFAULT_TYPE) -> int:
    """Stop the timer and end the conversation."""
    user_id = update.effective_user.id

    # Handle callback query (button press)
    if update.callback_query:
        query = update.callback_query
        await query.answer()

        if query.data == "force_stop":
            # Force stop existing timer
            if user_id in active_timers:
                session = active_timers[user_id]

                # Cancel the timer task
                if session.task and not session.task.done():
                    session.task.cancel()

                # Update statistics before removing
                await update_statistics(user_id, session)

                # Remove from active timers
                del active_timers[user_id]

                # Start a new session
                return await start(update, context)

        if query.data == "return_to_timer":
            # Return to existing timer
            keyboard = [
                [KeyboardButton("‚ùå –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä")],
                [KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton("‚è∏Ô∏è –ü–∞—É–∑–∞/‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å")]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

            await query.message.reply_text(
                "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ç–µ–∫—É—â–µ–º—É —Ç–∞–π–º–µ—Ä—É.",
                reply_markup=reply_markup)
            return RUNNING

        if user_id in active_timers:
            session = active_timers[user_id]

            # Cancel the timer task
            if session.task and not session.task.done():
                session.task.cancel()

            # Update statistics before removing
            await update_statistics(user_id, session)

            # Remove from active timers
            del active_timers[user_id]

            # Return to start keyboard
            keyboard = [
                [KeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é")],
                [KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton("‚ùì –ü–æ–º–æ—â—å")]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

            await query.message.reply_text(
                "‚èπ *–¢–∞–π–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!*\n\n"
                f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏:*\n"
                f"‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ —Ä–∞–±–æ—á–∏—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤: *{session.total_work_sessions}*\n"
                f"‚Ä¢ –û–±—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: *{format_time_duration(session.total_work_time)}*\n\n"
                "–ú–æ–ª–æ–¥–µ—Ü! –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '–ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é' –∏–ª–∏ /start.",
                parse_mode='Markdown',
                reply_markup=reply_markup)
        else:
            # Default keyboard with quick access buttons
            keyboard = [
                [KeyboardButton("üöÄ –°—Ç–∞—Ä—Ç"), KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
                [KeyboardButton("‚ùì –ü–æ–º–æ—â—å")]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

            await query.message.reply_text(
                "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é, –Ω–∞–∂–º–∏ /start.",
                reply_markup=reply_markup)

    # Handle text message (quick stop button)
    elif update.message and (update.message.text == "‚ùå –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä"
                          or update.message.text == "/stop"
                          or update.message.text == "‚èπ –°—Ç–æ–ø"):
        if user_id in active_timers:
            session = active_timers[user_id]

            # Cancel the timer task
            if session.task and not session.task.done():
                session.task.cancel()

            # Update statistics before removing
            await update_statistics(user_id, session)

            # Remove from active timers
            del active_timers[user_id]

            # Return to start keyboard
            keyboard = [
                [KeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é")],
                [KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton("‚ùì –ü–æ–º–æ—â—å")]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

            await update.message.reply_text(
                "‚èπ *–¢–∞–π–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!*\n\n"
                f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏:*\n"
                f"‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ —Ä–∞–±–æ—á–∏—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤: *{session.total_work_sessions}*\n"
                f"‚Ä¢ –û–±—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: *{format_time_duration(session.total_work_time)}*\n\n"
                "–ú–æ–ª–æ–¥–µ—Ü! –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '–ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é' –∏–ª–∏ /start.",
                parse_mode='Markdown',
                reply_markup=reply_markup)
        else:
            # Default keyboard with quick access buttons
            keyboard = [
                [KeyboardButton("üöÄ –°—Ç–∞—Ä—Ç"), KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
                [KeyboardButton("‚ùì –ü–æ–º–æ—â—å")]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

            await update.message.reply_text(
                "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é, –Ω–∞–∂–º–∏ /start.",
                reply_markup=reply_markup)

    return ConversationHandler.END


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Cancel the conversation."""
    # Return to default keyboard with quick access buttons
    keyboard = [
        [KeyboardButton("üöÄ –°—Ç–∞—Ä—Ç"), KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
        [KeyboardButton("‚ùì –ü–æ–º–æ—â—å")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    if update.message:
        await update.message.reply_text(
            "‚ùå *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞*\n\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –Ω–∞–∂–º–∏ /start.",
            parse_mode='Markdown',
            reply_markup=reply_markup)
    elif update.callback_query:
        await update.callback_query.message.reply_text(
            "‚ùå *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞*\n\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –Ω–∞–∂–º–∏ /start.",
            parse_mode='Markdown',
            reply_markup=reply_markup)

    user_id = update.effective_user.id

    # Clean up any active timer
    if user_id in active_timers:
        session = active_timers[user_id]

        # Cancel the timer task
        if session.task and not session.task.done():
            session.task.cancel()

        # Remove from active timers
        del active_timers[user_id]

    return ConversationHandler.END


async def pause_timer(update: Update,
                    context: ContextTypes.DEFAULT_TYPE) -> int:
    """Pause the timer."""
    query = update.callback_query
    await query.answer()

    user_id = update.effective_user.id

    if user_id in active_timers:
        session = active_timers[user_id]
        session.is_paused = True
        session.pause_start_time = datetime.now()

        # Update keyboard to show resume option
        keyboard = [
            [InlineKeyboardButton("‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="resume_timer")],
            [InlineKeyboardButton("‚èπÔ∏è –°—Ç–æ–ø", callback_data="stop_timer")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.message.reply_text(
            "‚è∏Ô∏è *–¢–∞–π–º–µ—Ä –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω*\n\n–ù–∞–∂–º–∏ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', —á—Ç–æ–±—ã –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –æ—Ç—Å—á–µ—Ç.",
            parse_mode='Markdown',
            reply_markup=reply_markup)
    else:
        # Default keyboard with quick access buttons
        keyboard = [
            [KeyboardButton("üöÄ –°—Ç–∞—Ä—Ç"), KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
            [KeyboardButton("‚ùì –ü–æ–º–æ—â—å")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

        await query.message.reply_text(
            "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é, –Ω–∞–∂–º–∏ /start.",
            reply_markup=reply_markup)

    return RUNNING


async def resume_timer(update: Update,
                     context: ContextTypes.DEFAULT_TYPE) -> int:
    """Resume the timer."""
    query = update.callback_query
    await query.answer()

    user_id = update.effective_user.id

    if user_id in active_timers:
        session = active_timers[user_id]
        session.is_paused = False

        # Update keyboard to show pause option
        keyboard = [
            [InlineKeyboardButton("‚è∏Ô∏è –ü–∞—É–∑–∞", callback_data="pause_timer")],
            [InlineKeyboardButton("‚èπÔ∏è –°—Ç–æ–ø", callback_data="stop_timer")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.message.reply_text(
            "‚ñ∂Ô∏è *–¢–∞–π–º–µ—Ä –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω*\n\n–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ—Ç—Å—á–µ—Ç!",
            parse_mode='Markdown',
            reply_markup=reply_markup)
    else:
        # Default keyboard with quick access buttons
        keyboard = [
            [KeyboardButton("üöÄ –°—Ç–∞—Ä—Ç"), KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
            [KeyboardButton("‚ùì –ü–æ–º–æ—â—å")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

        await query.message.reply_text(
            "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é, –Ω–∞–∂–º–∏ /start.",
            reply_markup=reply_markup)

    return RUNNING


async def skip_break(update: Update,
                   context: ContextTypes.DEFAULT_TYPE) -> int:
    """Skip the break period."""
    query = update.callback_query
    await query.answer()

    user_id = update.effective_user.id

    if user_id in active_timers:
        session = active_timers[user_id]

        if not session.is_working:
            # If in break mode, switch to work mode
            session.is_working = True

            # Create keyboard for work period
            keyboard = [
                [InlineKeyboardButton("‚è∏Ô∏è –ü–∞—É–∑–∞", callback_data="pause_timer")],
                [InlineKeyboardButton("‚èπÔ∏è –°—Ç–æ–ø", callback_data="stop_timer")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.message.reply_text(
                f"‚è≠Ô∏è *–ü–µ—Ä–µ—Ä—ã–≤ –ø—Ä–æ–ø—É—â–µ–Ω!*\n\n–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ä–∞–±–æ—Ç–µ –Ω–∞–¥ –ø—Ä–µ–¥–º–µ—Ç–æ–º *{session.subject}*.",
                parse_mode='Markdown',
                reply_markup=reply_markup)
    else:
        await query.message.reply_text(
            "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é, –Ω–∞–∂–º–∏ /start.")

    return RUNNING


async def help_command(update: Update,
                     context: ContextTypes.DEFAULT_TYPE) -> None:
    """Send a help message."""
    await update.message.reply_text(
        HELP_MESSAGES["main"], 
        parse_mode='Markdown')


async def force_stop_handler(update: Update,
                           context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handler for force stopping a timer and starting a new one."""
    return await stop_timer(update, context)


async def return_to_timer_handler(update: Update,
                                context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handler for returning to an active timer."""
    query = update.callback_query
    await query.answer()

    # Create keyboard for timer control
    keyboard = [
        [KeyboardButton("‚ùå –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä")],
        [KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton("‚è∏Ô∏è –ü–∞—É–∑–∞/‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å")],
        [KeyboardButton("‚ùì –ü–æ–º–æ—â—å")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await query.message.reply_text(
        "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ç–µ–∫—É—â–µ–º—É —Ç–∞–π–º–µ—Ä—É.", 
        reply_markup=reply_markup)

    return RUNNING


async def error_handler(update: Update,
                      context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle errors in the telegram bot."""
    logger.error(f"Update {update} caused error {context.error}")

    # Send a friendly message to the user
    if update.effective_chat:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n\n"
            "–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start."
        )


def main() -> None:
    """Start the bot."""
    # Load the bot token from environment variable for better security
    token = os.getenv("TELEGRAM_BOT_TOKEN")
    if not token:
        print("–û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é TELEGRAM_BOT_TOKEN")
        return

    # Create the Application and pass it your bot's token
    application = Application.builder().token(token).build()

    # Add conversation handler with enhanced state handling
    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("start", start),
            MessageHandler(filters.Regex("üîÑ –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é"), start),
            MessageHandler(filters.Regex("üöÄ –°—Ç–∞—Ä—Ç"), start)
        ],
        states={
            SUBJECT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, subject),
                CommandHandler("cancel", cancel)
            ],
            WORK_TIME: [
                CallbackQueryHandler(work_time, pattern=r"^work_"),
                CallbackQueryHandler(show_help, pattern=r"^help_"),
                CallbackQueryHandler(cancel, pattern=r"^cancel$"),
                MessageHandler(filters.TEXT & ~filters.COMMAND, work_time),
                CommandHandler("cancel", cancel)
            ],
            BREAK_TIME: [
                CallbackQueryHandler(break_time, pattern=r"^break_"),
                CallbackQueryHandler(show_help, pattern=r"^help_"),
                CallbackQueryHandler(cancel, pattern=r"^cancel$"),
                MessageHandler(filters.TEXT & ~filters.COMMAND, break_time),
                CommandHandler("cancel", cancel)
            ],
            START_TIME: [
                CallbackQueryHandler(start_time, pattern=r"^time_"),
                CallbackQueryHandler(show_help, pattern=r"^help_"),
                CallbackQueryHandler(cancel, pattern=r"^cancel$"),
                MessageHandler(filters.TEXT & ~filters.COMMAND, start_time),
                CommandHandler("cancel", cancel)
            ],
            END_TIME: [
                CallbackQueryHandler(end_time, pattern=r"^end_"),
                CallbackQueryHandler(show_help, pattern=r"^help_"),
                CallbackQueryHandler(cancel, pattern=r"^cancel$"),
                MessageHandler(filters.TEXT & ~filters.COMMAND, end_time),
                CommandHandler("cancel", cancel)
            ],
            RUNNING: [
                CallbackQueryHandler(stop_timer, pattern=r"^stop_timer$"),
                CallbackQueryHandler(pause_timer, pattern=r"^pause_timer$"),
                CallbackQueryHandler(resume_timer, pattern=r"^resume_timer$"),
                CallbackQueryHandler(skip_break, pattern=r"^skip_break$"),
                CallbackQueryHandler(force_stop_handler, pattern=r"^force_stop$"),
                CallbackQueryHandler(return_to_timer_handler, pattern=r"^return_to_timer$"),
                CallbackQueryHandler(show_help, pattern=r"^help$"),
                MessageHandler(filters.Regex("‚ùå –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä"), stop_timer),
                MessageHandler(filters.Regex("‚èπ –°—Ç–æ–ø"), stop_timer),
                MessageHandler(filters.Regex("‚è∏Ô∏è –ü–∞—É–∑–∞/‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"), toggle_pause),
                MessageHandler(filters.Regex("‚ùì –ü–æ–º–æ—â—å"), help_command),
                CommandHandler("stop", stop_timer)
            ],
        },
        fallbacks=[
            CommandHandler("cancel", cancel),
            CommandHandler("stop", stop_timer)
        ],
        per_message=False,
        name="study_timer_bot")

    # Additional handlers
    application.add_handler(conv_handler)
    application.add_handler(CommandHandler("stats", get_stats))
    application.add_handler(MessageHandler(filters.Regex("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), get_stats))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(MessageHandler(filters.Regex("‚ùì –ü–æ–º–æ—â—å"), help_command))
    application.add_handler(CallbackQueryHandler(clear_stats, pattern=r"^clear_stats$"))
    application.add_handler(CallbackQueryHandler(confirm_clear_stats, pattern=r"^confirm_clear_stats$"))
    application.add_handler(CallbackQueryHandler(cancel_clear_stats, pattern=r"^cancel_clear_stats$"))
    application.add_handler(CallbackQueryHandler(back_from_stats, pattern=r"^back_from_stats$"))
    application.add_handler(CallbackQueryHandler(show_help, pattern=r"^help"))

    # Add error handler
    application.add_error_handler(error_handler)

    # Start the Bot with better error handling
    try:
        logger.info("Starting bot...")
        application.run_polling(allowed_updates=Update.ALL_TYPES)
    except Exception as e:
        logger.error(f"Error starting bot: {e}")
        print(f"Error starting bot: {e}")


if __name__ == "__main__":
    main()